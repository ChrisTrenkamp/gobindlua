// Code generated by gobindlua; DO NOT EDIT.
package matrix

import (
	"fmt"

	"github.com/ChrisTrenkamp/gobindlua"
	lua "github.com/yuin/gopher-lua"
)

func (goType *Matrix) LuaModuleName() string {
	return "matrix"
}

func (goType *Matrix) LuaModuleLoader(L *lua.LState) int {
	staticMethodsTable := L.NewTable()
	L.SetField(staticMethodsTable, "new_from", L.NewFunction(luaConstructorMatrixNewMatrixFrom))

	L.Push(staticMethodsTable)

	return 1
}

func (goType *Matrix) LuaRegisterGlobalMetatable(L *lua.LState) {
	fieldsTable := L.NewTypeMetatable(goType.LuaMetatableType())
	L.SetGlobal(goType.LuaMetatableType(), fieldsTable)
	L.SetField(fieldsTable, "__index", L.NewFunction(luaAccessMatrix))
	L.SetField(fieldsTable, "__newindex", L.NewFunction(luaSetMatrix))
}

func luaConstructorMatrixNewMatrixFrom(L *lua.LState) int {

	var p0 [][]float64

	{

		ud, err := gobindlua.MapLuaArrayOrTableToGoSlice[[]float64](L.CheckAny(1), 0, func(val0 lua.LValue) []float64 {

			v0, err := gobindlua.MapLuaArrayOrTableToGoSlice[float64](val0, 1, func(val1 lua.LValue) float64 {

				v1_n, ok := val1.(lua.LNumber)

				if !ok {
					gobindlua.TableElemCastError(L, 2, "float64", val1)
				}

				v1 := float64(v1_n)

				return v1
			})

			if err != nil {
				L.ArgError(1, err.Error())
			}

			return v0
		})

		if err != nil {
			L.ArgError(1, err.Error())
		}

		p0 = ud
	}

	r0 := NewMatrixFrom(p0)

	L.Push(gobindlua.NewUserData(&r0, L))

	return 1
}

func (r *Matrix) LuaMetatableType() string {
	return "matrix_fields"
}

func luaCheckMatrix(param int, L *lua.LState) *Matrix {
	ud := L.CheckUserData(param)
	v, ok := ud.Value.(*Matrix)
	if !ok {
		gobindlua.CastArgError(L, 1, "Matrix", ud.Value)
	}
	return v
}

func luaAccessMatrix(L *lua.LState) int {
	recv := luaCheckMatrix(1, L)
	p2 := L.CheckString(2)

	switch p2 {
	case "elements":
		L.Push(gobindlua.NewUserData(&gobindlua.LuaArray{
			Slice: recv.Elements,
			Len:   func() int { return len(recv.Elements) },
			Index: func(idx0 int) lua.LValue {
				return gobindlua.NewUserData(&gobindlua.LuaArray{
					Slice: (recv.Elements)[idx0],
					Len:   func() int { return len((recv.Elements)[idx0]) },
					Index: func(idx1 int) lua.LValue { return (lua.LNumber)(((recv.Elements)[idx0])[idx1]) },
					SetIndex: func(idx1 int, val1 lua.LValue) {

						t1_n, ok := val1.(lua.LNumber)

						if !ok {
							gobindlua.TableElemCastError(L, 2, "float64", val1)
						}

						t1 := float64(t1_n)

						((recv.Elements)[idx0])[idx1] = t1
					},
				}, L)
			},
			SetIndex: func(idx0 int, val0 lua.LValue) {

				t0, err := gobindlua.MapLuaArrayOrTableToGoSlice[float64](val0, 1, func(val1 lua.LValue) float64 {

					v1_n, ok := val1.(lua.LNumber)

					if !ok {
						gobindlua.TableElemCastError(L, 2, "float64", val1)
					}

					v1 := float64(v1_n)

					return v1
				})

				if err != nil {
					L.ArgError(3, err.Error())
				}

				(recv.Elements)[idx0] = t0
			},
		}, L))

	case "string":
		L.Push(L.NewFunction(luaMethodMatrixString))

	default:
		L.Push(lua.LNil)
	}

	return 1
}

func luaSetMatrix(L *lua.LState) int {
	recv := luaCheckMatrix(1, L)
	p2 := L.CheckString(2)

	switch p2 {
	case "elements":

		ud, err := gobindlua.MapLuaArrayOrTableToGoSlice[[]float64](L.CheckAny(3), 0, func(val0 lua.LValue) []float64 {

			v0, err := gobindlua.MapLuaArrayOrTableToGoSlice[float64](val0, 1, func(val1 lua.LValue) float64 {

				v1_n, ok := val1.(lua.LNumber)

				if !ok {
					gobindlua.TableElemCastError(L, 2, "float64", val1)
				}

				v1 := float64(v1_n)

				return v1
			})

			if err != nil {
				L.ArgError(3, err.Error())
			}

			return v0
		})

		if err != nil {
			L.ArgError(3, err.Error())
		}

		recv.Elements = ud

	default:
		L.ArgError(2, fmt.Sprintf("unknown field %s", p2))
	}

	return 0
}

func luaMethodMatrixString(L *lua.LState) int {
	r := luaCheckMatrix(1, L)

	r0 := r.String()

	L.Push((lua.LString)(r0))

	return 1
}
