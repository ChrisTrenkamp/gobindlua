// Code generated by gobindlua; DO NOT EDIT.
package maps

import (
	"fmt"

	"github.com/ChrisTrenkamp/gobindlua"
	lua "github.com/yuin/gopher-lua"
)

func (goType *UserDatabase) LuaModuleName() string {
	return "UserDatabase"
}

func (goType *UserDatabase) LuaModuleLoader(L *lua.LState) int {
	staticMethodsTable := L.NewTable()
	L.SetField(staticMethodsTable, "NewUserDatabase", L.NewFunction(luaConstructorUserDatabaseNewUserDatabase))
	L.SetField(staticMethodsTable, "NewUserDatabaseFrom", L.NewFunction(luaConstructorUserDatabaseNewUserDatabaseFrom))

	L.Push(staticMethodsTable)

	return 1
}

func (goType *UserDatabase) LuaRegisterGlobalMetatable(L *lua.LState) {
	fieldsTable := L.NewTypeMetatable(goType.LuaMetatableType())
	L.SetGlobal(goType.LuaMetatableType(), fieldsTable)
	L.SetField(fieldsTable, "__index", L.NewFunction(luaAccessUserDatabase))
	L.SetField(fieldsTable, "__newindex", L.NewFunction(luaSetUserDatabase))
}

func luaConstructorUserDatabaseNewUserDatabase(L *lua.LState) int {

	r0 := NewUserDatabase()

	L.Push(gobindlua.NewUserData(&r0, L))

	return 1
}

func luaConstructorUserDatabaseNewUserDatabaseFrom(L *lua.LState) int {

	var p0 map[int]User

	{

		ud, err := gobindlua.MapLuaArrayOrTableToGoMap[int, User](L.CheckAny(1), 0, func(key0, val0 lua.LValue) (int, User) {

			k0_n, ok := key0.(lua.LNumber)

			if !ok {
				gobindlua.TableElemCastError(L, 1, "int", key0)
			}

			k0 := int(k0_n)

			v0_ud, ok := val0.(*lua.LUserData)

			if !ok {
				gobindlua.TableElemCastError(L, 1, "User", val0)
			}

			v0, ok := v0_ud.Value.(*User)

			if !ok {
				gobindlua.TableElemCastError(L, 1, "User", val0)
			}

			return k0, *v0
		})

		if err != nil {
			L.ArgError(1, err.Error())
		}

		p0 = ud
	}

	r0 := NewUserDatabaseFrom(p0)

	L.Push(gobindlua.NewUserData(&r0, L))

	return 1
}

func (r *UserDatabase) LuaMetatableType() string {
	return "UserDatabaseTable"
}

func luaCheckUserDatabase(param int, L *lua.LState) *UserDatabase {
	ud := L.CheckUserData(param)
	v, ok := ud.Value.(*UserDatabase)
	if !ok {
		gobindlua.CastArgError(L, 1, "UserDatabase", ud.Value)
	}
	return v
}

func luaAccessUserDatabase(L *lua.LState) int {
	recv := luaCheckUserDatabase(1, L)
	p2 := L.CheckString(2)

	switch p2 {
	case "Users":
		L.Push(gobindlua.NewUserData(&gobindlua.GblMap{
			Map: recv.Users,
			Len: func() int { return len(recv.Users) },
			GetValue: func(key0 lua.LValue) lua.LValue {

				keyVal0_n, ok := key0.(lua.LNumber)

				if !ok {
					gobindlua.TableElemCastError(L, 1, "int", key0)
				}

				keyVal0 := int(keyVal0_n)

				ret0 := (recv.Users)[(int)(keyVal0)]
				return gobindlua.NewUserData(&ret0, L)
			},
			SetValue: func(key0 lua.LValue, val0 lua.LValue) {

				keyVal0_n, ok := key0.(lua.LNumber)

				if !ok {
					gobindlua.TableElemCastError(L, 1, "int", key0)
				}

				keyVal0 := int(keyVal0_n)

				valVal0_ud, ok := val0.(*lua.LUserData)

				if !ok {
					gobindlua.TableElemCastError(L, 1, "User", val0)
				}

				valVal0, ok := valVal0_ud.Value.(*User)

				if !ok {
					gobindlua.TableElemCastError(L, 1, "User", val0)
				}

				(recv.Users)[(int)(keyVal0)] = (User)(*valVal0)
			},
			ForEach: func(f0 func(k0, v0 lua.LValue)) {
				for k0_iter, v0_iter := range recv.Users {
					retKey0 := k0_iter
					ret0 := v0_iter
					key0 := (lua.LNumber)(retKey0)
					val0 := gobindlua.NewUserData(&ret0, L)
					f0(key0, val0)
				}
			},
		}, L))

	default:
		L.Push(lua.LNil)
	}

	return 1
}

func luaSetUserDatabase(L *lua.LState) int {
	recv := luaCheckUserDatabase(1, L)
	p2 := L.CheckString(2)

	switch p2 {
	case "Users":

		ud, err := gobindlua.MapLuaArrayOrTableToGoMap[int, User](L.CheckAny(3), 0, func(key0, val0 lua.LValue) (int, User) {

			k0_n, ok := key0.(lua.LNumber)

			if !ok {
				gobindlua.TableElemCastError(L, 1, "int", key0)
			}

			k0 := int(k0_n)

			v0_ud, ok := val0.(*lua.LUserData)

			if !ok {
				gobindlua.TableElemCastError(L, 1, "User", val0)
			}

			v0, ok := v0_ud.Value.(*User)

			if !ok {
				gobindlua.TableElemCastError(L, 1, "User", val0)
			}

			return k0, *v0
		})

		if err != nil {
			L.ArgError(3, err.Error())
		}

		recv.Users = ud

	default:
		L.ArgError(2, fmt.Sprintf("unknown field %s", p2))
	}

	return 0
}
