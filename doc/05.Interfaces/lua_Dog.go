// Code generated by gobindlua; DO NOT EDIT.
package interfaces

import (
	"fmt"

	"github.com/ChrisTrenkamp/gobindlua"
	lua "github.com/yuin/gopher-lua"
)

func (goType *Dog) LuaModuleName() string {
	return "dog"
}

func (goType *Dog) LuaModuleLoader(L *lua.LState) int {
	staticMethodsTable := L.NewTable()
	L.SetField(staticMethodsTable, "new", L.NewFunction(luaConstructorDogNewDog))

	L.Push(staticMethodsTable)

	return 1
}

func (goType *Dog) LuaRegisterGlobalMetatable(L *lua.LState) {
	fieldsTable := L.NewTypeMetatable(goType.LuaMetatableType())
	L.SetGlobal(goType.LuaMetatableType(), fieldsTable)
	L.SetField(fieldsTable, "__index", L.NewFunction(luaAccessDog))
	L.SetField(fieldsTable, "__newindex", L.NewFunction(luaSetDog))
}

func luaConstructorDogNewDog(L *lua.LState) int {

	r0 := NewDog()

	L.Push(gobindlua.NewUserData(&r0, L))

	return 1
}

func (r *Dog) LuaMetatableType() string {
	return "dog_fields"
}

func luaCheckDog(param int, L *lua.LState) *Dog {
	ud := L.CheckUserData(param)
	v, ok := ud.Value.(*Dog)
	if !ok {
		L.ArgError(1, gobindlua.CastArgError("Dog", ud.Value))
	}
	return v
}

func luaAccessDog(L *lua.LState) int {
	p2 := L.CheckString(2)

	switch p2 {
	case "sound":
		L.Push(L.NewFunction(luaMethodDogSound))

	default:
		L.Push(lua.LNil)
	}

	return 1
}

func luaSetDog(L *lua.LState) int {
	p2 := L.CheckString(2)

	switch p2 {

	default:
		L.ArgError(2, fmt.Sprintf("unknown field %s", p2))
	}

	return 0
}

func luaMethodDogSound(L *lua.LState) int {
	r := luaCheckDog(1, L)

	r0 := r.Sound()

	L.Push((lua.LString)(r0))

	return 1
}
