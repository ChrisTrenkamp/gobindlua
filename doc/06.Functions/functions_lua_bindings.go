// Code generated by gobindlua; DO NOT EDIT.
package functions

import (
	"github.com/ChrisTrenkamp/gobindlua"
	lua "github.com/yuin/gopher-lua"
)

func FunctionsModuleLoader(L *lua.LState) int {
	staticMethodsTable := L.NewTable()
	L.SetField(staticMethodsTable, "print_me", L.NewFunction(luaFunctionPrintMe))
	L.SetField(staticMethodsTable, "split", L.NewFunction(luaFunctionSplit))
	L.SetField(staticMethodsTable, "go_left_pad", L.NewFunction(luaFunctionGoLeftPad))
	L.SetField(staticMethodsTable, "do_func", L.NewFunction(luaFunctionDoFunc))

	L.Push(staticMethodsTable)

	return 1
}

func luaFunctionPrintMe(L *lua.LState) int {

	var p0 []any

	{

		ud, err := gobindlua.MapVariadicArgsToGoSlice[any](1, L, func(val0 lua.LValue) any {

			v0 := gobindlua.UnwrapLValueToAny(val0)

			return v0
		})

		if err != nil {
			L.ArgError(1, err.Error())
		}

		p0 = ud
	}

	PrintMe(p0...)

	return 0
}

func luaFunctionSplit(L *lua.LState) int {

	var p0 string

	var p1 string

	{
		ud := string(L.CheckString(1))
		p0 = ud
	}

	{
		ud := string(L.CheckString(2))
		p1 = ud
	}

	r0 := Split(p0, p1)

	L.Push(gobindlua.NewUserData(&gobindlua.LuaArray{
		Slice: r0,
		Len:   func() int { return len(r0) },
		Index: func(idx0 int) lua.LValue { return (lua.LString)((r0)[idx0]) },
		SetIndex: func(idx0 int, val0 lua.LValue) {

			t0_n, ok := val0.(lua.LString)

			if !ok {
				gobindlua.TableElemCastError(L, 1, "string", val0)
			}

			t0 := string(t0_n)

			(r0)[idx0] = t0
		},
	}, L))

	return 1
}

func luaFunctionGoLeftPad(L *lua.LState) int {

	var p0 string

	var p1 int

	{
		ud := string(L.CheckString(1))
		p0 = ud
	}

	{
		ud := int(L.CheckNumber(2))
		p1 = ud
	}

	r0 := GoLeftPad(p0, p1)

	L.Push((lua.LString)(r0))

	return 1
}

func luaFunctionDoFunc(L *lua.LState) int {

	var p0 func(string, int) string

	{

		ud_lf, ok := L.CheckAny(1).(*lua.LFunction)

		if !ok {
			gobindlua.CastArgError(L, 1, "func(string, int) string", L.CheckAny(1))
		}

		ud := func(p0 string, p1 int) string {
			L.Push(ud_lf)

			L.Push((lua.LString)(p0))

			L.Push((lua.LNumber)(p1))

			L.Call(2, 1)

			r0l_n, ok := L.Get(-1).(lua.LString)

			if !ok {
				gobindlua.FuncResCastError(L, 1, "string", L.Get(-1))
			}

			r0l := string(r0l_n)

			L.Pop(1)

			return r0l
		}

		p0 = ud
	}

	DoFunc(p0)

	return 0
}
